{"version":3,"sources":["features/post/PostForm.module.css","features/window-buttons/WindowButtons.module.css","features/navbar/TopNavbar.module.css","features/navbar/topNavbarSlice.js","features/post/postFormSlice.js","features/navbar/TopNavbar.jsx","features/window-buttons/WindowButtons.jsx","features/post/Post.jsx","features/post/PostForm.jsx","features/post/Post.model.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","topNavbarReducer","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","postFormReducer","posts","cachedPosts","removePost","filter","c","id","addPost","text","title","date","updatePost","copy","filterPost","searchKey","length","list","post","indexOf","TopNavbar","dispatch","useDispatch","useState","setSearchKey","Navbar","bg","expand","Brand","href","Collapse","Nav","className","Form","inline","FormControl","type","placeholder","onChange","event","target","WindowButtons","props","Button","styles","windowbuttons","variant","onClick","postid","Post","selectedPost","useSelector","postform","p","setText","useRef","Card","Header","Row","Col","data-testid","Body","Subtitle","rows","onBlur","getRowKey","_uniqueId","PostForm","postTitle","setPostTitle","onAddButton","Date","toDateString","generateColumns","map","index","Container","md","span","offset","InputGroup","style","width","Prepend","disabled","aria-describedby","onKeyUp","keyCode","columns","push","generateRows","App","configureStore","reducer","counter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,cAAgB,uC,wCCAlCD,EAAOC,QAAU,CAAC,IAAM,uBAAuB,MAAQ,yBAAyB,OAAS,0BAA0B,QAAU,2BAA2B,YAAc,yD,uICCzJC,EAAmBC,YAAY,CAC1CC,KAAM,SACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAAAC,GAKTA,EAAMH,OAAS,GAEjBI,UAAW,SAAAD,GACTA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAK+BX,EAAiBY,QAiB7DZ,G,EAjBAM,U,EAAWE,U,EAAWC,kBAiBtBT,EAAf,S,QCvCaa,EAAkBZ,YAAY,CACvCC,KAAM,WACNC,aAAc,CACVW,MAAO,GACPC,YAAa,IAEjBV,SAAU,CACNW,WAAY,SAACT,EAAOG,GAChBH,EAAMO,MAAQP,EAAMO,MAAMG,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAOT,EAAOC,QAAQQ,MAC9DZ,EAAMQ,YAAN,YAAwBR,EAAMO,QAElCM,QAAS,SAACb,EAAOG,GACbH,EAAMO,MAAN,sBAAkBP,EAAMO,OAAxB,CAA+B,CAC3BK,GAAIT,EAAOC,QAAQQ,GACnBE,KAAMX,EAAOC,QAAQU,KACrBC,MAAOZ,EAAOC,QAAQW,MACtBC,KAAMb,EAAOC,QAAQY,QAEzBhB,EAAMQ,YAAN,YAAwBR,EAAMO,QAElCU,WAAY,SAACjB,EAAOG,GAChB,IAAMe,EAAI,YAAOlB,EAAMO,OACvBW,EAAKf,EAAOC,QAAQQ,IAAM,CACtBA,GAAIT,EAAOC,QAAQQ,GACnBG,MAAOZ,EAAOC,QAAQW,MACtBD,KAAMX,EAAOC,QAAQU,KACrBE,KAAMb,EAAOC,QAAQY,MAEzBhB,EAAMO,MAAQW,EACdlB,EAAMQ,YAAN,YAAwBR,EAAMO,QAElCY,WAAY,SAACnB,EAAOG,GAChB,GAAwC,IAApCA,EAAOC,QAAQgB,UAAUC,OAA7B,CAKA,IAAIC,EAAO,YAAItB,EAAMO,OAAOG,QAAO,SAAAa,GAAI,OAAsD,IAAlDA,EAAKR,MAAMS,QAAQrB,EAAOC,QAAQgB,aAC5B,IAAjDG,EAAKT,KAAKU,QAAQrB,EAAOC,QAAQgB,cACjCpB,EAAMO,MAAQe,OANVtB,EAAMO,MAAN,YAAkBP,EAAMQ,iB,EAWuBF,EAAgBD,QAAhEI,E,EAAAA,WAAYI,E,EAAAA,QAASI,E,EAAAA,WAAYE,E,EAAAA,WAIjCb,IAAf,Q,wCCzCO,SAASmB,IACZ,IAAMC,EAAWC,cADO,EAGUC,mBAAS,IAHnB,mBAGjBR,EAHiB,KAGNS,EAHM,KAcxB,OACI,8BACI,eAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,UACI,cAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,QAAnB,uBACA,eAACJ,EAAA,EAAOK,SAAR,CAAiBvB,GAAG,mBAApB,UACI,cAACwB,EAAA,EAAD,CAAKC,UAAU,YACf,cAACC,EAAA,EAAD,CAAMC,QAAM,EAAZ,SACI,cAACC,EAAA,EAAD,CAAaC,KAAK,OACNC,YAAY,SACZL,UAAU,UACVxC,MAAOuB,EACPuB,SAhBN,SAACC,GACvBf,EAAae,EAAMC,OAAOhD,OAC1B6B,EAASP,EAAW,CAACC,UAAWwB,EAAMC,OAAOhD,sB,qECd9C,SAASiD,EAAcC,GAC1B,IAAMrB,EAAWC,cAOjB,OACI,8BACI,cAACqB,EAAA,EAAD,CAAQX,UAAWY,IAAOC,cAClBC,QAAQ,YACRV,KAAK,SACLW,QAVA,WAEZ1B,EAASjB,EAAW,CAACG,GAAImC,EAAMM,WAK3B,iB,MCTL,SAASC,EAAKP,GACjB,IAAMrB,EAAWC,cACX4B,EAAeC,aAAY,SAAAxD,GAAK,OAAIA,EAAMyD,SAASlD,MAAMG,QAAO,SAAAgD,GAAC,OAAIA,EAAE9C,KAAOmC,EAAMxB,KAAKX,SAFvE,EAGAgB,mBAAS2B,EAAa,GAAGzC,MAHzB,mBAGjBA,EAHiB,KAGX6C,EAHW,KAIRC,mBAehB,OACI,eAACC,EAAA,EAAD,CAAQ9B,GAAG,QACHjB,KAAK,OACLuB,UAAU,OAFlB,UAGI,cAACwB,EAAA,EAAKC,OAAN,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,UAA4B,qBAAKC,cAAa,cAAgBlB,EAAMxB,KAAKX,GAA7C,SAAkDmC,EAAMxB,KAAKR,SAAhF,oBACT,cAACiD,EAAA,EAAD,UAA4B,cAAClB,EAAD,CAAeO,OAAQN,EAAMxB,KAAKX,MAArD,yBAGjB,eAACiD,EAAA,EAAKK,KAAN,WACI,cAACL,EAAA,EAAKM,SAAN,CAAe9B,UAAU,kBAAzB,SAA4CU,EAAMxB,KAAKP,OACvD,qBAAKqB,UAAU,aAAf,SACI,0BAAYA,UAAU,eACV+B,KAAK,IAAIxD,GAAG,UACZf,MAAOiB,EACPuD,OA1BN,WAClB3C,EAAST,EAAW,CACZL,GAAImC,EAAMxB,KAAKX,GACfG,MAAOgC,EAAMxB,KAAKR,MAClBD,KAAMA,EACNE,KAAM+B,EAAMxB,KAAKP,SAsBD2B,SA/BI,SAACC,GAC7Be,EAAQf,EAAMC,OAAOhD,kB,qBCJ7B,SAASyE,IACL,OAAOC,IAAU,QAUd,SAASC,IAAY,IAAD,EACW5C,mBAAS,IADpB,mBAChB6C,EADgB,KACLC,EADK,KAEjBhD,EAAWC,cACXpB,EAAQiD,aAAY,SAAAxD,GAAK,OAAIA,EAAMyD,SAASlD,SAE5CoE,EAAc,WAChBjD,EAASb,EC1BN,CACHD,GDyB4BL,EAAMc,OCxBlCN,MDwB0C0D,ECvB1C3D,KDuBqD,GCtBrDE,MAAM,IAAI4D,MAAOC,kBDuBjBH,EAAa,KAGXI,EAAkBvE,EAAMwE,KAAI,SAACxD,EAAMyD,GACrC,OAAO,cAAChB,EAAA,EAAD,UACH,cAACV,EAAD,CAAM/B,KAAMA,KAlBbgD,IAAU,YA8CjB,OACI,qBAAKlC,UAAU,YAAf,SACI,eAAC4C,EAAA,EAAD,WACI,cAAClB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAckB,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAArC,SACI,eAACC,EAAA,EAAD,CAAYhD,UAAU,OAAOiD,MAAO,CAACC,MAAO,SAA5C,UACI,cAACF,EAAA,EAAWG,QAAZ,UACI,cAACxC,EAAA,EAAD,CAAQiB,cAAY,aAChBd,QAAQ,oBACRC,QAASuB,EACTc,SAA+B,IAArBhB,EAAUpD,OAHxB,mBAKJ,cAACmB,EAAA,EAAD,CACIyB,cAAY,YACZyB,mBAAiB,eACjBhD,YAAY,iBACZ7C,MAAO4E,EACPkB,QAvBL,SAAC/C,GACE,KAAlBA,EAAMgD,SACNjB,KAsBoBhC,SA5BK,SAACC,GAC9B8B,EAAa9B,EAAMC,OAAOhD,cAaL,OADJ,MAmBT,uBACA,uBAhDS,SAACgG,GAGlB,IAFA,IAAIzB,EAAO,GACP9C,EAAO,GACF0D,EAAQ,EAAGA,EAAQa,EAAQxE,OAAQ2D,IACxC1D,EAAKwE,KAAKD,EAAQb,KACbA,EAAQ,GAAK,IAAM,GAAe,IAAVA,GACzBZ,EAAK0B,KAAK,cAAC/B,EAAA,EAAD,UAAwBzC,GAAdgD,MACpBhD,EAAO,IACA0D,IAAUzE,EAAMc,OAAS,GAChC+C,EAAK0B,KAAK,cAAC/B,EAAA,EAAD,UAAwBzC,GAAdgD,MAG5B,OAAOF,EAqCE2B,CAAajB,Q,YEjEfkB,MAdf,WACI,OACI,sBAAK3D,UAAU,MAAf,UACI,wBAAQA,UAAU,aAAlB,SACI,cAACZ,EAAD,MAEJ,sBAAKY,UAAU,cAAf,UACI,uBACA,cAACmC,EAAD,WCVDyB,cAAe,CAC1BC,QAAS,CACLC,QAAS1G,EACTgE,SAAUnD,KCKE8F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ad6e8fe6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsave\":\"PostForm_postsave__36IT7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"windowbuttons\":\"WindowButtons_windowbuttons__QkCj0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"TopNavbar_row__1xp00\",\"value\":\"TopNavbar_value__i6s8h\",\"button\":\"TopNavbar_button__15hfH\",\"textbox\":\"TopNavbar_textbox__9JH2e\",\"asyncButton\":\"TopNavbar_asyncButton__3Zfae TopNavbar_button__15hfH\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const topNavbarReducer = createSlice({\r\n  name: 'navbar',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = topNavbarReducer.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default topNavbarReducer.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const postFormReducer = createSlice({\n    name: 'postform',\n    initialState: {\n        posts: [],\n        cachedPosts: []\n    },\n    reducers: {\n        removePost: (state, action) => {\n            state.posts = state.posts.filter(c => c.id !== action.payload.id);\n            state.cachedPosts = [...state.posts];\n        },\n        addPost: (state, action) => {\n            state.posts = [...state.posts, {\n                id: action.payload.id,\n                text: action.payload.text,\n                title: action.payload.title,\n                date: action.payload.date\n            }];\n            state.cachedPosts = [...state.posts];\n        },\n        updatePost: (state, action) => {\n            const copy = [...state.posts];\n            copy[action.payload.id] = {\n                id: action.payload.id,\n                title: action.payload.title,\n                text: action.payload.text,\n                date: action.payload.date\n            };\n            state.posts = copy;\n            state.cachedPosts = [...state.posts];\n        },\n        filterPost: (state, action) => {\n            if (action.payload.searchKey.length === 0) {\n                state.posts = [...state.cachedPosts];\n                return;\n            }\n            debugger;\n            let list = [...state.posts].filter(post => post.title.indexOf(action.payload.searchKey) !== -1 || \n            post.text.indexOf(action.payload.searchKey) !== -1 );\n            state.posts = list;\n        }\n    }\n});\n\nexport const { removePost, addPost, updatePost, filterPost } = postFormReducer.actions;\nexport const selectPosts = state => { \n    return state.postform.posts;\n}\nexport default postFormReducer.reducer;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n    selectCount\r\n} from './topNavbarSlice';\r\nimport { filterPost } from '../post/postFormSlice';\r\nimport styles from './TopNavbar.module.css';\r\nimport { Button, Form, FormControl, Nav, Navbar } from 'react-bootstrap';\r\n\r\nexport function TopNavbar() {\r\n    const dispatch = useDispatch();\r\n    // const selectedPost = useSelector(state => state.postform.posts.filter(p => p.id === props.post.id));\r\n    const [searchKey, setSearchKey] = useState('');\r\n\r\n    const onSearchHandler = () => {\r\n        \r\n    }\r\n\r\n    const onSearchKeyChange = (event) => {\r\n        setSearchKey(event.target.value);\r\n        dispatch(filterPost({searchKey: event.target.value}));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand href=\"#home\">Todo List</Navbar.Brand>\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\"></Nav>\r\n                    <Form inline>\r\n                        <FormControl type=\"text\" \r\n                                    placeholder=\"Search\" \r\n                                    className=\"mr-sm-2\" \r\n                                    value={searchKey} \r\n                                    onChange={onSearchKeyChange}/>\r\n                    </Form>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}","import { Button, ButtonGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removePost } from '../post/postFormSlice';\n\nimport styles from './WindowButtons.module.css';\n\nexport function WindowButtons(props) {\n    const dispatch = useDispatch();\n\n    const onClick = () => {\n        debugger;\n        dispatch(removePost({id: props.postid}));\n    }\n\n    return (\n        <div>\n            <Button className={styles.windowbuttons} \n                    variant=\"secondary\"\n                    type=\"submit\"\n                    onClick={onClick}>X</Button>\n        </div>\n    );\n}","import { useState, useRef } from 'react';\nimport { Button, Card, Col, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { WindowButtons } from '../window-buttons/WindowButtons';\nimport { updatePost } from './postFormSlice';\nimport styles from './PostForm.module.css';\n\nexport function Post(props) {\n    const dispatch = useDispatch();\n    const selectedPost = useSelector(state => state.postform.posts.filter(p => p.id === props.post.id));\n    const [text, setText] = useState(selectedPost[0].text);\n    const myInput = useRef();\n\n    const onPostTextChangeHandler = (event) => {\n        setText(event.target.value);\n    }\n\n    const onSaveHandler = () => {\n        dispatch(updatePost({\n                id: props.post.id, \n                title: props.post.title, \n                text: text,\n                date: props.post.date\n            }));\n    }\n\n    return (\n        <Card   bg=\"Light\"\n                text=\"Dark\"\n                className=\"mb-2\">\n            <Card.Header>\n                <Row>\n                    <Col></Col>\n                    <Col key=\"cardheader.row.1\"><div data-testid={\"cardheader-\" + props.post.id}>{props.post.title}</div></Col>\n                    <Col key=\"cardheader.row.2\"><WindowButtons postid={props.post.id}/></Col>\n                </Row>\n            </Card.Header>\n            <Card.Body>\n                <Card.Subtitle className=\"mb-2 text-muted\">{props.post.date}</Card.Subtitle>\n                <div className=\"form-group\">\n                    <textarea   className=\"form-control\" \n                                rows=\"5\" id=\"comment\" \n                                value={text} \n                                onBlur={onSaveHandler}\n                                onChange={onPostTextChangeHandler}></textarea>\n                </div>\n            </Card.Body>\n        </Card>\n    )\n}","import { Button, Col, Container, FormControl, InputGroup, Row } from 'react-bootstrap';\nimport { Post } from './Post';\nimport { useState } from 'react';\nimport  './PostForm.module.css';\nimport { createPost } from './Post.model';\nimport _uniqueId from 'lodash/uniqueId';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addPost, selectPosts } from './postFormSlice';\n\n\nfunction getRowKey() {\n    return _uniqueId('row-');\n}\n\nfunction getColKey() {\n    return _uniqueId('col-');\n}\n\n/**\n * \n */\nexport function PostForm() {    \n    const [postTitle, setPostTitle] = useState('');\n    const dispatch = useDispatch();\n    const posts = useSelector(state => state.postform.posts);\n\n    const onAddButton = () => {\n        dispatch(addPost(createPost(posts.length, postTitle, '')));\n        setPostTitle('');\n    }\n\n    const generateColumns = posts.map((post, index) => {\n        return <Col key={getColKey()}>\n            <Post post={post}/>\n        </Col>});\n\n    const generateRows = (columns) => {\n        let rows = [];\n        let list = [];\n        for (let index = 0; index < columns.length; index++) {\n            list.push(columns[index]);\n            if ((index + 1) % 3 === 0 && index !== 0) {\n                rows.push(<Row key={getRowKey()}>{list}</Row>);\n                list = [];\n            } else if (index === posts.length - 1) {\n                rows.push(<Row key={getRowKey()}>{list}</Row>);\n            }\n        }\n        return rows;\n    }\n\n    const onPostTitleChangeHandler = (event) => {\n        setPostTitle(event.target.value);\n    }\n\n    const onEnterHandler = (event) => {\n        if (event.keyCode === 13) {\n            onAddButton();\n        }\n    }\n\n    return (\n        <div className=\"post-main\">\n            <Container>\n                <Row key=\"-1\">\n                    <Col key=\"-1\" md={{ span: 0, offset: 0}}>\n                        <InputGroup className=\"mb-3\" style={{width: \"100vh\"}}>\n                            <InputGroup.Prepend>\n                                <Button data-testid=\"button-add\"\n                                    variant=\"outline-secondary\" \n                                    onClick={onAddButton}\n                                    disabled={postTitle.length === 0}>Add</Button>\n                            </InputGroup.Prepend>\n                            <FormControl \n                                data-testid=\"input-add\"\n                                aria-describedby=\"basic-addon1\" \n                                placeholder=\"Add post title\" \n                                value={postTitle} \n                                onKeyUp={onEnterHandler}\n                                onChange={onPostTitleChangeHandler}/>\n                        </InputGroup>\n                    </Col>\n                </Row>\n                <br/>\n                <br/>\n                {generateRows(generateColumns)}\n            </Container>\n        </div>\n    )\n}\n\nexport default PostForm;","export function createPost(id, title, text) {\n    return {\n        id: id,\n        title: title,\n        text: text,\n        date: new Date().toDateString()\n    }\n}","import React from 'react';\r\nimport { TopNavbar } from './features/navbar/TopNavbar';\r\nimport { PostForm } from './features/post/PostForm';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <TopNavbar />         \r\n            </header>\r\n            <div className=\"App-content\">\r\n                <br/>\r\n                <PostForm />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport topNavbarReducer from '../features/navbar/topNavbarSlice';\r\nimport postFormReducer from '../features/post/postFormSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        counter: topNavbarReducer,\r\n        postform: postFormReducer\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}